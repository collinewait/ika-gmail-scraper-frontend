{"version":3,"sources":["header.js","EmailForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","EmailForm","email","handleSubmit","handleChange","onSubmit","type","value","placeholder","onChange","data-download-btn","requestAccessToGmailAccount","window","location","href","process","getAttachments","setResolved","setError","setLoading","jwtToken","loginToken","localStorage","getItem","jwtDecode","exp","Date","now","bearer","decodedToken","getAuthorization","authorization","url","fetch","method","headers","Authorization","credentials","then","resp","status","Error","blob","URL","createObjectURL","Blob","link","document","createElement","date","today","toLocaleDateString","day","month","year","setAttribute","click","revokeObjectURL","catch","err","setItem","removeItem","message","fetchAttachments","App","React","useState","setEmail","resolved","error","loading","useEffect","token","URLSearchParams","search","get","history","replaceState","pathname","emailInStorage","validateEmail","test","role","event","target","preventDefault","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0974238.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => (\n  <div className=\"App-header\">\n    <h2>IKA</h2>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst EmailForm = ({ email, handleSubmit, handleChange }) => (\n  <div className=\"Form\">\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"email\"\n        value={email}\n        placeholder=\"Email that sent attachment\"\n        className=\"Form-drawingInput\"\n        onChange={handleChange}\n      />\n\n      <button\n        data-download-btn=\"download-btn\"\n        type=\"submit\"\n        className=\"Form-button\"\n      >\n        Download\n      </button>\n    </form>\n  </div>\n);\n\nexport default EmailForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport jwtDecode from \"jwt-decode\";\n\nimport Header from \"./header\";\nimport EmailForm from \"./EmailForm\";\n\nconst requestAccessToGmailAccount = () => {\n  window.location.href = `${process.env.REACT_APP_API_BASE_URL}/auth/google/login`;\n};\n\nconst fetchAttachments = (\n  authorization,\n  setResolved,\n  email,\n  setError,\n  setLoading\n) => {\n  const url = `${process.env.REACT_APP_API_BASE_URL}/download/attachment?emailThatSentAttach=${email}`;\n  window\n    .fetch(url, {\n      method: \"GET\",\n      headers: {\n        Authorization: authorization\n      },\n      credentials: \"include\"\n    })\n    .then(resp => {\n      if (resp.status !== 200) {\n        throw new Error(\"Something went wrong, please try again\");\n      }\n      return resp.blob();\n    })\n    .then(blob => {\n      const url = window.URL.createObjectURL(new Blob([blob]));\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n\n      const date = new Date();\n      const today = `${date.toLocaleDateString(\"en-US\", {\n        day: \"numeric\"\n      })}-${date.toLocaleDateString(\"en-US\", {\n        month: \"short\"\n      })}-${date.toLocaleDateString(\"en-US\", { year: \"numeric\" })}`;\n      link.setAttribute(\"download\", `attachment-${today}.zip`);\n\n      link.click();\n      window.URL.revokeObjectURL(url);\n      setLoading(false);\n      setError(null);\n      setResolved(true);\n    })\n    .catch(err => {\n      setLoading(false);\n      setResolved(false);\n      localStorage.setItem(\"email\", email);\n      localStorage.removeItem(\"login-token\");\n      setError(err.message);\n    });\n};\n\nconst getLoginToken = () => localStorage.getItem(\"login-token\");\nconst decodeJwtToken = jwtToken => jwtDecode(jwtToken);\nconst getAuthorization = decodedToken => `Bearer ${decodedToken}`;\n\nconst getAttachments = (email, setResolved, setError, setLoading) => {\n  const loginToken = getLoginToken();\n  if (loginToken) {\n    const decodedToken = decodeJwtToken(loginToken);\n    if (decodedToken.exp > Date.now() / 1000) {\n      const bearer = getAuthorization(loginToken);\n      setLoading(true);\n      setError(null);\n      setResolved(false);\n      fetchAttachments(bearer, setResolved, email, setError, setLoading);\n    } else {\n      localStorage.setItem(\"email\", email);\n      requestAccessToGmailAccount();\n    }\n  } else {\n    localStorage.setItem(\"email\", email);\n    requestAccessToGmailAccount();\n  }\n};\n\nfunction App() {\n  const [email, setEmail] = React.useState(\"\");\n  const [resolved, setResolved] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get(\"access_token\");\n\n    if (token) {\n      localStorage.setItem(\"login-token\", token);\n      window.history.replaceState(null, null, window.location.pathname);\n      const emailInStorage = localStorage.getItem(\"email\");\n\n      getAttachments(emailInStorage, setResolved, setError, setLoading);\n\n      localStorage.removeItem(\"email\");\n    }\n  }, []);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const isValidEmail = validateEmail(email);\n    if (isValidEmail) {\n      getAttachments(email, setResolved, setError, setLoading);\n    } else {\n      setResolved(false);\n      setError(\"Invalid email address\");\n    }\n  };\n\n  const handleChange = event => {\n    setEmail(event.target.value);\n  };\n\n  const validateEmail = email => {\n    const regx = /.+@.+\\..+/;\n    return regx.test(email);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <h3 className=\"simple-heading\">\n        Download Attachments sent by a specific email address\n      </h3>\n      {error ? (\n        <div role=\"alert\" className=\"error-message\">\n          {error}\n        </div>\n      ) : null}\n      {resolved ? (\n        <div role=\"alert\" className=\"success-message\">\n          Download completed!\n        </div>\n      ) : null}\n      {loading ? (\n        <div role=\"alert\" className=\"loader\">\n          Downloading...\n        </div>\n      ) : null}\n      <EmailForm\n        email={email}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}